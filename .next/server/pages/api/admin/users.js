"use strict";(()=>{var e={};e.id=651,e.ids=[651],e.modules={2104:e=>{e.exports=require("@next-auth/prisma-adapter")},3524:e=>{e.exports=require("@prisma/client")},8432:e=>{e.exports=require("bcryptjs")},3227:e=>{e.exports=require("next-auth")},2113:e=>{e.exports=require("next-auth/next")},7449:e=>{e.exports=require("next-auth/providers/credentials")},7459:e=>{e.exports=require("next-auth/providers/github")},3598:e=>{e.exports=require("next-auth/providers/google")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},5930:(e,t,s)=>{s.r(t),s.d(t,{config:()=>c,default:()=>l,routeModule:()=>p});var r={};s.r(r),s.d(r,{default:()=>handler});var a=s(1802),n=s(7153),i=s(6249),u=s(4637),o=s(2113),d=s(8417);async function handler(e,t){let s=await (0,o.getServerSession)(e,t,d.authOptions);if(!s)return t.status(401).json({message:"Unauthorized"});let r=await u._.user.findUnique({where:{email:s.user.email}});if(!r||"admin"!==r.role)return t.status(403).json({message:"Access denied. Admin role required."});switch(e.method){case"GET":return handleGetUsers(e,t);case"PUT":return handleUpdateUser(e,t);case"DELETE":return handleDeleteUser(e,t);default:return t.status(405).json({message:"Method not allowed"})}}async function handleGetUsers(e,t){try{let{page:s=1,limit:r=10,search:a,role:n,status:i}=e.query,o=(parseInt(s)-1)*parseInt(r),d={};a&&(d.OR=[{email:{contains:a,mode:"insensitive"}},{name:{contains:a,mode:"insensitive"}}]),n&&(d.role=n),i&&(d.status=i);let[l,c]=await Promise.all([u._.user.findMany({where:d,skip:o,take:parseInt(r),select:{id:!0,name:!0,email:!0,isEmailVerified:!0,role:!0,status:!0,lastLoginAt:!0,createdAt:!0,updatedAt:!0,_count:{select:{lists:!0}}},orderBy:{createdAt:"desc"}}),u._.user.count({where:d})]);t.status(200).json({users:l,pagination:{page:parseInt(s),limit:parseInt(r),total:c,pages:Math.ceil(c/parseInt(r))}})}catch(e){console.error("Get users error:",e),t.status(500).json({message:"Internal server error"})}}async function handleUpdateUser(e,t){try{let{userId:s,role:r,status:a,name:n}=e.body;if(!s)return t.status(400).json({message:"User ID is required"});let i={};r&&(i.role=r),a&&(i.status=a),void 0!==n&&(i.name=n);let o=await u._.user.update({where:{id:s},data:i,select:{id:!0,name:!0,email:!0,role:!0,status:!0,updatedAt:!0}});t.status(200).json({user:o})}catch(e){if(console.error("Update user error:",e),"P2025"===e.code)return t.status(404).json({message:"User not found"});t.status(500).json({message:"Internal server error"})}}async function handleDeleteUser(e,t){try{let{userId:s}=e.body;if(!s)return t.status(400).json({message:"User ID is required"});let r=await u._.user.update({where:{id:s},data:{status:"deleted"},select:{id:!0,email:!0,status:!0}});t.status(200).json({user:r})}catch(e){if(console.error("Delete user error:",e),"P2025"===e.code)return t.status(404).json({message:"User not found"});t.status(500).json({message:"Internal server error"})}}let l=(0,i.l)(r,"default"),c=(0,i.l)(r,"config"),p=new a.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/admin/users",pathname:"/api/admin/users",bundlePath:"",filename:""},userland:r})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),s=t.X(0,[222,417],()=>__webpack_exec__(5930));module.exports=s})();