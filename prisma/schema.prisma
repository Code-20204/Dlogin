// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ListType {
  MANUAL
  AUTO
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String    @unique
  emailVerified          DateTime?
  image                  String?
  password               String?   // 仅密码登录用户有值
  resetToken             String?   // 密码重置令牌
  resetTokenExpiry       DateTime? // 重置令牌过期时间
  emailVerificationToken String?   // 邮箱验证令牌
  emailTokenExpiry       DateTime? // 邮箱验证令牌过期时间
  isEmailVerified        Boolean   @default(false) // 邮箱是否已验证
  role                   String    @default("user") // 用户角色: user, admin
  status                 String    @default("active") // 用户状态: active, suspended, deleted
  lastLoginAt            DateTime? // 最后登录时间
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  accounts               Account[]
  sessions               Session[]
  lists                  List[]

  @@index([email])
  @@index([resetToken])
  @@index([emailVerificationToken])
  @@index([role])
  @@index([status])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id        String     @id @default(cuid())
  title     String
  type      ListType   @default(MANUAL) // MANUAL 或 AUTO
  rules     Json?      // 自动化规则 { field: 'dueDate', operator: '<', value: 'endOfWeek' }
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     ListItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model ListItem {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  priority    String?   @default("medium") // low, medium, high
  listId      String
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([listId])
  @@index([dueDate])
  @@index([completed])
}